#ifndef LUMEN_H
#define LUMEN_H

#pragma once

/* Warning, this file is autogenerated by cbindgen. Don't modify this manually. */

#include <stdarg.h>
#include <stdbool.h>
#include <stdint.h>
#include <stdlib.h>

/**
 * FFI-safe result type
 */
typedef struct LumenResult {
  /**
   * Success/failure indicator (0 = success, non-zero = error)
   */
  int code;
  /**
   * Error message (null if success)
   */
  char *message;
} LumenResult;

#ifdef __cplusplus
extern "C" {
#endif // __cplusplus

/**
 * Get the Lumen library version
 *
 * Returns a null-terminated string containing the version.
 * The caller must free the returned string with `lumen_free_string`.
 *
 * # Safety
 * The returned pointer must be freed with `lumen_free_string`.
 */
char *lumen_version(void);

/**
 * Get version components
 *
 * # Safety
 * All output parameters must be valid pointers.
 */
void lumen_version_components(uint32_t *major, uint32_t *minor, uint32_t *patch);

/**
 * Initialize the Lumen logging system
 *
 * This should be called once at application startup.
 *
 * # Returns
 * A `LumenResult` indicating success or failure.
 */
struct LumenResult lumen_init_logging(void);

/**
 * Free a string allocated by Lumen
 *
 * # Safety
 * The string must have been allocated by a Lumen FFI function.
 * After calling this function, the pointer is invalid and must not be used.
 */
void lumen_free_string(char *s);

/**
 * Free a LumenResult
 *
 * This frees any allocated error message in the result.
 *
 * # Safety
 * The result must have been returned by a Lumen FFI function.
 */
void lumen_free_result(struct LumenResult *result);

/**
 * Test function to verify FFI is working
 *
 * Returns a test message that should be freed with `lumen_free_string`.
 *
 * # Safety
 * The returned pointer must be freed with `lumen_free_string`.
 */
char *lumen_test_message(void);

#ifdef __cplusplus
} // extern "C"
#endif // __cplusplus

#endif /* LUMEN_H */
